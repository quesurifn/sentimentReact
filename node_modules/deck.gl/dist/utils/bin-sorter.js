"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// getValue takes an array of points returns a value to sort the bins on.
// by default it returns the number of points
// this is where to pass in a function to color the bins by
// avg/mean/max of specific value of the point
var defaultGetValue = function defaultGetValue(points) {
  return points.length;
};

var BinSorter = function () {
  function BinSorter() {
    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var getValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetValue;

    _classCallCheck(this, BinSorter);

    this.sortedBins = this.getSortedBins(bins, getValue);
    this.maxCount = this.getMaxCount();
    this.binMap = this.getBinMap();
  }

  /**
   * Get an array of object with sorted values and index of bins
   * @param {Array} bins
   * @param {Function} getValue
   * @return {Array} array of values and index lookup
   */


  _createClass(BinSorter, [{
    key: "getSortedBins",
    value: function getSortedBins(bins, getValue) {
      return bins.map(function (h, i) {
        return {
          i: Number.isFinite(h.index) ? h.index : i,
          value: getValue(h.points),
          counts: h.points.length
        };
      }).sort(function (a, b) {
        return a.value - b.value;
      });
    }

    /**
     * Get range of values of all bins
     * @param {Number[]} range
     * @param {Number} range[0] - lower bound
     * @param {Number} range[1] - upper bound
     * @return {Array} array of new value range
     */

  }, {
    key: "getValueRange",
    value: function getValueRange(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          lower = _ref2[0],
          upper = _ref2[1];

      var len = this.sortedBins.length;
      if (!len) {
        return [0, 0];
      }
      var lowerIdx = Math.ceil(lower / 100 * (len - 1));
      var upperIdx = Math.floor(upper / 100 * (len - 1));

      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];
    }

    /**
     * Get ths max count of all bins
     * @return {Number | Boolean} max count
     */

  }, {
    key: "getMaxCount",
    value: function getMaxCount() {
      return Math.max.apply(null, this.sortedBins.map(function (b) {
        return b.counts;
      }));
    }

    /**
     * Get a mapping from cell/hexagon index to sorted bin
     * This is used to retrieve bin value for color calculation
     * @return {Object} bin index to sortedBins
     */

  }, {
    key: "getBinMap",
    value: function getBinMap() {
      return this.sortedBins.reduce(function (mapper, curr) {
        return Object.assign(mapper, _defineProperty({}, curr.i, curr));
      }, {});
    }
  }]);

  return BinSorter;
}();

exports.default = BinSorter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9iaW4tc29ydGVyLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRHZXRWYWx1ZSIsInBvaW50cyIsImxlbmd0aCIsIkJpblNvcnRlciIsImJpbnMiLCJnZXRWYWx1ZSIsInNvcnRlZEJpbnMiLCJnZXRTb3J0ZWRCaW5zIiwibWF4Q291bnQiLCJnZXRNYXhDb3VudCIsImJpbk1hcCIsImdldEJpbk1hcCIsIm1hcCIsImgiLCJpIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJpbmRleCIsInZhbHVlIiwiY291bnRzIiwic29ydCIsImEiLCJiIiwibG93ZXIiLCJ1cHBlciIsImxlbiIsImxvd2VySWR4IiwiTWF0aCIsImNlaWwiLCJ1cHBlcklkeCIsImZsb29yIiwibWF4IiwiYXBwbHkiLCJyZWR1Y2UiLCJtYXBwZXIiLCJjdXJyIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsa0JBQWtCLFNBQWxCQSxlQUFrQjtBQUFBLFNBQVVDLE9BQU9DLE1BQWpCO0FBQUEsQ0FBeEI7O0lBRXFCQyxTO0FBQ25CLHVCQUFtRDtBQUFBLFFBQXZDQyxJQUF1Qyx1RUFBaEMsRUFBZ0M7QUFBQSxRQUE1QkMsUUFBNEIsdUVBQWpCTCxlQUFpQjs7QUFBQTs7QUFDakQsU0FBS00sVUFBTCxHQUFrQixLQUFLQyxhQUFMLENBQW1CSCxJQUFuQixFQUF5QkMsUUFBekIsQ0FBbEI7QUFDQSxTQUFLRyxRQUFMLEdBQWdCLEtBQUtDLFdBQUwsRUFBaEI7QUFDQSxTQUFLQyxNQUFMLEdBQWMsS0FBS0MsU0FBTCxFQUFkO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7a0NBTWNQLEksRUFBTUMsUSxFQUFVO0FBQzVCLGFBQU9ELEtBQ0pRLEdBREksQ0FDQSxVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxlQUFXO0FBQ2RBLGFBQUdDLE9BQU9DLFFBQVAsQ0FBZ0JILEVBQUVJLEtBQWxCLElBQTJCSixFQUFFSSxLQUE3QixHQUFxQ0gsQ0FEMUI7QUFFZEksaUJBQU9iLFNBQVNRLEVBQUVaLE1BQVgsQ0FGTztBQUdka0Isa0JBQVFOLEVBQUVaLE1BQUYsQ0FBU0M7QUFISCxTQUFYO0FBQUEsT0FEQSxFQU1Ka0IsSUFOSSxDQU1DLFVBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLGVBQVVELEVBQUVILEtBQUYsR0FBVUksRUFBRUosS0FBdEI7QUFBQSxPQU5ELENBQVA7QUFPRDs7QUFFRDs7Ozs7Ozs7Ozt3Q0FPOEI7QUFBQTtBQUFBLFVBQWZLLEtBQWU7QUFBQSxVQUFSQyxLQUFROztBQUM1QixVQUFNQyxNQUFNLEtBQUtuQixVQUFMLENBQWdCSixNQUE1QjtBQUNBLFVBQUksQ0FBQ3VCLEdBQUwsRUFBVTtBQUNSLGVBQU8sQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFQO0FBQ0Q7QUFDRCxVQUFNQyxXQUFXQyxLQUFLQyxJQUFMLENBQVVMLFFBQVEsR0FBUixJQUFlRSxNQUFNLENBQXJCLENBQVYsQ0FBakI7QUFDQSxVQUFNSSxXQUFXRixLQUFLRyxLQUFMLENBQVdOLFFBQVEsR0FBUixJQUFlQyxNQUFNLENBQXJCLENBQVgsQ0FBakI7O0FBRUEsYUFBTyxDQUFDLEtBQUtuQixVQUFMLENBQWdCb0IsUUFBaEIsRUFBMEJSLEtBQTNCLEVBQWtDLEtBQUtaLFVBQUwsQ0FBZ0J1QixRQUFoQixFQUEwQlgsS0FBNUQsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7O2tDQUljO0FBQ1osYUFBT1MsS0FBS0ksR0FBTCxDQUFTQyxLQUFULENBQWUsSUFBZixFQUFxQixLQUFLMUIsVUFBTCxDQUFnQk0sR0FBaEIsQ0FBb0I7QUFBQSxlQUFLVSxFQUFFSCxNQUFQO0FBQUEsT0FBcEIsQ0FBckIsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7OztnQ0FLWTtBQUNWLGFBQU8sS0FBS2IsVUFBTCxDQUFnQjJCLE1BQWhCLENBQXVCLFVBQUNDLE1BQUQsRUFBU0MsSUFBVDtBQUFBLGVBQWtCQyxPQUFPQyxNQUFQLENBQWNILE1BQWQsc0JBQzdDQyxLQUFLckIsQ0FEd0MsRUFDcENxQixJQURvQyxFQUFsQjtBQUFBLE9BQXZCLEVBRUgsRUFGRyxDQUFQO0FBR0Q7Ozs7OztrQkExRGtCaEMsUyIsImZpbGUiOiJiaW4tc29ydGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbi8vIGdldFZhbHVlIHRha2VzIGFuIGFycmF5IG9mIHBvaW50cyByZXR1cm5zIGEgdmFsdWUgdG8gc29ydCB0aGUgYmlucyBvbi5cbi8vIGJ5IGRlZmF1bHQgaXQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIHBvaW50c1xuLy8gdGhpcyBpcyB3aGVyZSB0byBwYXNzIGluIGEgZnVuY3Rpb24gdG8gY29sb3IgdGhlIGJpbnMgYnlcbi8vIGF2Zy9tZWFuL21heCBvZiBzcGVjaWZpYyB2YWx1ZSBvZiB0aGUgcG9pbnRcbmNvbnN0IGRlZmF1bHRHZXRWYWx1ZSA9IHBvaW50cyA9PiBwb2ludHMubGVuZ3RoO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaW5Tb3J0ZXIge1xuICBjb25zdHJ1Y3RvcihiaW5zID0gW10sIGdldFZhbHVlID0gZGVmYXVsdEdldFZhbHVlKSB7XG4gICAgdGhpcy5zb3J0ZWRCaW5zID0gdGhpcy5nZXRTb3J0ZWRCaW5zKGJpbnMsIGdldFZhbHVlKTtcbiAgICB0aGlzLm1heENvdW50ID0gdGhpcy5nZXRNYXhDb3VudCgpO1xuICAgIHRoaXMuYmluTWFwID0gdGhpcy5nZXRCaW5NYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gYXJyYXkgb2Ygb2JqZWN0IHdpdGggc29ydGVkIHZhbHVlcyBhbmQgaW5kZXggb2YgYmluc1xuICAgKiBAcGFyYW0ge0FycmF5fSBiaW5zXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGdldFZhbHVlXG4gICAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiB2YWx1ZXMgYW5kIGluZGV4IGxvb2t1cFxuICAgKi9cbiAgZ2V0U29ydGVkQmlucyhiaW5zLCBnZXRWYWx1ZSkge1xuICAgIHJldHVybiBiaW5zXG4gICAgICAubWFwKChoLCBpKSA9PiAoe1xuICAgICAgICBpOiBOdW1iZXIuaXNGaW5pdGUoaC5pbmRleCkgPyBoLmluZGV4IDogaSxcbiAgICAgICAgdmFsdWU6IGdldFZhbHVlKGgucG9pbnRzKSxcbiAgICAgICAgY291bnRzOiBoLnBvaW50cy5sZW5ndGhcbiAgICAgIH0pKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEudmFsdWUgLSBiLnZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmFuZ2Ugb2YgdmFsdWVzIG9mIGFsbCBiaW5zXG4gICAqIEBwYXJhbSB7TnVtYmVyW119IHJhbmdlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYW5nZVswXSAtIGxvd2VyIGJvdW5kXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYW5nZVsxXSAtIHVwcGVyIGJvdW5kXG4gICAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiBuZXcgdmFsdWUgcmFuZ2VcbiAgICovXG4gIGdldFZhbHVlUmFuZ2UoW2xvd2VyLCB1cHBlcl0pIHtcbiAgICBjb25zdCBsZW4gPSB0aGlzLnNvcnRlZEJpbnMubGVuZ3RoO1xuICAgIGlmICghbGVuKSB7XG4gICAgICByZXR1cm4gWzAsIDBdO1xuICAgIH1cbiAgICBjb25zdCBsb3dlcklkeCA9IE1hdGguY2VpbChsb3dlciAvIDEwMCAqIChsZW4gLSAxKSk7XG4gICAgY29uc3QgdXBwZXJJZHggPSBNYXRoLmZsb29yKHVwcGVyIC8gMTAwICogKGxlbiAtIDEpKTtcblxuICAgIHJldHVybiBbdGhpcy5zb3J0ZWRCaW5zW2xvd2VySWR4XS52YWx1ZSwgdGhpcy5zb3J0ZWRCaW5zW3VwcGVySWR4XS52YWx1ZV07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRocyBtYXggY291bnQgb2YgYWxsIGJpbnNcbiAgICogQHJldHVybiB7TnVtYmVyIHwgQm9vbGVhbn0gbWF4IGNvdW50XG4gICAqL1xuICBnZXRNYXhDb3VudCgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgdGhpcy5zb3J0ZWRCaW5zLm1hcChiID0+IGIuY291bnRzKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgbWFwcGluZyBmcm9tIGNlbGwvaGV4YWdvbiBpbmRleCB0byBzb3J0ZWQgYmluXG4gICAqIFRoaXMgaXMgdXNlZCB0byByZXRyaWV2ZSBiaW4gdmFsdWUgZm9yIGNvbG9yIGNhbGN1bGF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH0gYmluIGluZGV4IHRvIHNvcnRlZEJpbnNcbiAgICovXG4gIGdldEJpbk1hcCgpIHtcbiAgICByZXR1cm4gdGhpcy5zb3J0ZWRCaW5zLnJlZHVjZSgobWFwcGVyLCBjdXJyKSA9PiBPYmplY3QuYXNzaWduKG1hcHBlciwge1xuICAgICAgW2N1cnIuaV06IGN1cnJcbiAgICB9KSwge30pO1xuICB9XG59XG4iXX0=