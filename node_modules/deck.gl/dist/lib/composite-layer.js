'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _layer = require('./layer');

var _layer2 = _interopRequireDefault(_layer);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var CompositeLayer = function (_Layer) {
  _inherits(CompositeLayer, _Layer);

  function CompositeLayer(props) {
    _classCallCheck(this, CompositeLayer);

    return _possibleConstructorReturn(this, (CompositeLayer.__proto__ || Object.getPrototypeOf(CompositeLayer)).call(this, props));
  }

  _createClass(CompositeLayer, [{
    key: 'initializeState',


    // initializeState is usually not needed for composite layers
    // Provide empty definition to disable check for missing definition
    value: function initializeState() {}

    // No-op for the invalidateAttribute function as the composite
    // layer has no AttributeManager

  }, {
    key: 'invalidateAttribute',
    value: function invalidateAttribute() {}

    // called to augment the info object that is bubbled up from a sublayer
    // override Layer.getPickingInfo() because decoding / setting uniform do
    // not apply to a composite layer.
    // @return null to cancel event

  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref) {
      var info = _ref.info;

      return info;
    }

    // Implement to generate sublayers

  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      return null;
    }
  }, {
    key: '_renderLayers',
    value: function _renderLayers(updateParams) {
      if (!this.shouldUpdateState(updateParams)) {
        _utils.log.log(2, 'Composite layer reusing sublayers', this.state.oldSubLayers);
        return this.state.oldSubLayers;
      }
      var subLayers = this.renderLayers();
      this.state.oldSubLayers = subLayers;
      _utils.log.log(2, 'Composite layer saving sublayers', this.state.oldSubLayers);
      return subLayers;
    }
  }, {
    key: 'isComposite',
    get: function get() {
      return true;
    }
  }]);

  return CompositeLayer;
}(_layer2.default);

exports.default = CompositeLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29tcG9zaXRlLWxheWVyLmpzIl0sIm5hbWVzIjpbIkNvbXBvc2l0ZUxheWVyIiwicHJvcHMiLCJpbmZvIiwidXBkYXRlUGFyYW1zIiwic2hvdWxkVXBkYXRlU3RhdGUiLCJsb2ciLCJzdGF0ZSIsIm9sZFN1YkxheWVycyIsInN1YkxheWVycyIsInJlbmRlckxheWVycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFvQkE7Ozs7QUFDQTs7Ozs7Ozs7K2VBckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztJQUtxQkEsYzs7O0FBQ25CLDBCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsMkhBQ1hBLEtBRFc7QUFFbEI7Ozs7OztBQU1EO0FBQ0E7c0NBQ2tCLENBQ2pCOztBQUVEO0FBQ0E7Ozs7MENBQ3NCLENBQ3JCOztBQUVEO0FBQ0E7QUFDQTtBQUNBOzs7O3lDQUN1QjtBQUFBLFVBQVBDLElBQU8sUUFBUEEsSUFBTzs7QUFDckIsYUFBT0EsSUFBUDtBQUNEOztBQUVEOzs7O21DQUNlO0FBQ2IsYUFBTyxJQUFQO0FBQ0Q7OztrQ0FFYUMsWSxFQUFjO0FBQzFCLFVBQUksQ0FBQyxLQUFLQyxpQkFBTCxDQUF1QkQsWUFBdkIsQ0FBTCxFQUEyQztBQUN6QyxtQkFBSUUsR0FBSixDQUFRLENBQVIsRUFBVyxtQ0FBWCxFQUFnRCxLQUFLQyxLQUFMLENBQVdDLFlBQTNEO0FBQ0EsZUFBTyxLQUFLRCxLQUFMLENBQVdDLFlBQWxCO0FBQ0Q7QUFDRCxVQUFNQyxZQUFZLEtBQUtDLFlBQUwsRUFBbEI7QUFDQSxXQUFLSCxLQUFMLENBQVdDLFlBQVgsR0FBMEJDLFNBQTFCO0FBQ0EsaUJBQUlILEdBQUosQ0FBUSxDQUFSLEVBQVcsa0NBQVgsRUFBK0MsS0FBS0MsS0FBTCxDQUFXQyxZQUExRDtBQUNBLGFBQU9DLFNBQVA7QUFDRDs7O3dCQXBDaUI7QUFDaEIsYUFBTyxJQUFQO0FBQ0Q7Ozs7OztrQkFQa0JSLGMiLCJmaWxlIjoiY29tcG9zaXRlLWxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBMYXllciBmcm9tICcuL2xheWVyJztcbmltcG9ydCB7bG9nfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9zaXRlTGF5ZXIgZXh0ZW5kcyBMYXllciB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgZ2V0IGlzQ29tcG9zaXRlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gaW5pdGlhbGl6ZVN0YXRlIGlzIHVzdWFsbHkgbm90IG5lZWRlZCBmb3IgY29tcG9zaXRlIGxheWVyc1xuICAvLyBQcm92aWRlIGVtcHR5IGRlZmluaXRpb24gdG8gZGlzYWJsZSBjaGVjayBmb3IgbWlzc2luZyBkZWZpbml0aW9uXG4gIGluaXRpYWxpemVTdGF0ZSgpIHtcbiAgfVxuXG4gIC8vIE5vLW9wIGZvciB0aGUgaW52YWxpZGF0ZUF0dHJpYnV0ZSBmdW5jdGlvbiBhcyB0aGUgY29tcG9zaXRlXG4gIC8vIGxheWVyIGhhcyBubyBBdHRyaWJ1dGVNYW5hZ2VyXG4gIGludmFsaWRhdGVBdHRyaWJ1dGUoKSB7XG4gIH1cblxuICAvLyBjYWxsZWQgdG8gYXVnbWVudCB0aGUgaW5mbyBvYmplY3QgdGhhdCBpcyBidWJibGVkIHVwIGZyb20gYSBzdWJsYXllclxuICAvLyBvdmVycmlkZSBMYXllci5nZXRQaWNraW5nSW5mbygpIGJlY2F1c2UgZGVjb2RpbmcgLyBzZXR0aW5nIHVuaWZvcm0gZG9cbiAgLy8gbm90IGFwcGx5IHRvIGEgY29tcG9zaXRlIGxheWVyLlxuICAvLyBAcmV0dXJuIG51bGwgdG8gY2FuY2VsIGV2ZW50XG4gIGdldFBpY2tpbmdJbmZvKHtpbmZvfSkge1xuICAgIHJldHVybiBpbmZvO1xuICB9XG5cbiAgLy8gSW1wbGVtZW50IHRvIGdlbmVyYXRlIHN1YmxheWVyc1xuICByZW5kZXJMYXllcnMoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBfcmVuZGVyTGF5ZXJzKHVwZGF0ZVBhcmFtcykge1xuICAgIGlmICghdGhpcy5zaG91bGRVcGRhdGVTdGF0ZSh1cGRhdGVQYXJhbXMpKSB7XG4gICAgICBsb2cubG9nKDIsICdDb21wb3NpdGUgbGF5ZXIgcmV1c2luZyBzdWJsYXllcnMnLCB0aGlzLnN0YXRlLm9sZFN1YkxheWVycyk7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5vbGRTdWJMYXllcnM7XG4gICAgfVxuICAgIGNvbnN0IHN1YkxheWVycyA9IHRoaXMucmVuZGVyTGF5ZXJzKCk7XG4gICAgdGhpcy5zdGF0ZS5vbGRTdWJMYXllcnMgPSBzdWJMYXllcnM7XG4gICAgbG9nLmxvZygyLCAnQ29tcG9zaXRlIGxheWVyIHNhdmluZyBzdWJsYXllcnMnLCB0aGlzLnN0YXRlLm9sZFN1YkxheWVycyk7XG4gICAgcmV0dXJuIHN1YkxheWVycztcbiAgfVxufVxuIl19