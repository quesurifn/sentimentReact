"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

exports.default = "\n#define SHADER_NAME hexagon-cell-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 normals;\n\nattribute vec3 instancePositions;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\n// Picking uniforms\n// Set to 1.0 if rendering picking buffer, 0.0 if rendering for display\nuniform float renderPickingBuffer;\nuniform vec3 selectedPickingColor;\n\n// Custom uniforms\nuniform float opacity;\nuniform float radius;\nuniform float angle;\nuniform float extruded;\nuniform float coverage;\nuniform float elevationScale;\n\n// Result\nvarying vec4 vColor;\n\n// A magic number to scale elevation so that 1 unit approximate to 1 meter.\n#define ELEVATION_SCALE 0.8\n\n// whether is point picked\nfloat isPicked(vec3 pickingColors, vec3 selectedColor) {\n return float(pickingColors.x == selectedColor.x\n && pickingColors.y == selectedColor.y\n && pickingColors.z == selectedColor.z);\n}\n\nvoid main(void) {\n\n  // rotate primitive position and normal\n  mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\n  vec2 rPos = rotationMatrix * positions.xz;\n  vec2 rNorm = rotationMatrix * normals.xz;\n\n  vec3 rotatedPositions = vec3(rPos.x, positions.y, rPos.y);\n  vec3 rotatedNormals = vec3(rNorm.x, normals.y, rNorm.y);\n\n  // calculate elevation, if 3d not enabled set to 0\n  // cylindar gemoetry height are between -0.5 to 0.5, transform it to between 0, 1\n  float elevation = 0.0;\n\n  if (extruded > 0.5) {\n    elevation = project_scale(instancePositions.z * (positions.y + 0.5) *\n      ELEVATION_SCALE * elevationScale);\n  }\n\n  float dotRadius = radius * mix(coverage, 0.0, float(instanceColors.a == 0.0));\n  // // project center of hexagon\n\n  vec4 centroidPosition = vec4(project_position(instancePositions.xy), elevation, 0.0);\n\n  vec4 position_worldspace = centroidPosition + vec4(vec2(rotatedPositions.xz * dotRadius), 0., 1.);\n\n  gl_Position = project_to_clipspace(position_worldspace);\n\n  // render display\n  if (renderPickingBuffer < 0.5) {\n\n    // TODO: we should allow the user to specify the color for \"selected element\"\n    // check whether hexagon is currently picked.\n    float selected = isPicked(instancePickingColors, selectedPickingColor);\n\n    // Light calculations\n    // Worldspace is the linear space after Mercator projection\n\n    vec3 normals_worldspace = rotatedNormals;\n\n    float lightWeight = 1.0;\n\n    if (extruded > 0.5) {\n      lightWeight = getLightWeight(\n        position_worldspace.xyz, // the w component is always 1.0\n        normals_worldspace\n      );\n    }\n\n    vec3 lightWeightedColor = lightWeight * instanceColors.rgb;\n\n    // Color: Either opacity-multiplied instance color, or picking color\n    vec4 color = vec4(lightWeightedColor, opacity * instanceColors.a) / 255.0;\n\n    vColor = color;\n\n  } else {\n\n    vec4 pickingColor = vec4(instancePickingColors / 255.0, 1.0);\n    vColor = pickingColor;\n\n  }\n}\n";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9oZXhhZ29uLWNlbGwtbGF5ZXIvaGV4YWdvbi1jZWxsLWxheWVyLXZlcnRleC5nbHNsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiaGV4YWdvbi1jZWxsLWxheWVyLXZlcnRleC5nbHNsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmV4cG9ydCBkZWZhdWx0IGBcXFxuXG4jZGVmaW5lIFNIQURFUl9OQU1FIGhleGFnb24tY2VsbC1sYXllci12ZXJ0ZXgtc2hhZGVyXG5cbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9ucztcbmF0dHJpYnV0ZSB2ZWMzIG5vcm1hbHM7XG5cbmF0dHJpYnV0ZSB2ZWMzIGluc3RhbmNlUG9zaXRpb25zO1xuYXR0cmlidXRlIHZlYzQgaW5zdGFuY2VDb2xvcnM7XG5hdHRyaWJ1dGUgdmVjMyBpbnN0YW5jZVBpY2tpbmdDb2xvcnM7XG5cbi8vIFBpY2tpbmcgdW5pZm9ybXNcbi8vIFNldCB0byAxLjAgaWYgcmVuZGVyaW5nIHBpY2tpbmcgYnVmZmVyLCAwLjAgaWYgcmVuZGVyaW5nIGZvciBkaXNwbGF5XG51bmlmb3JtIGZsb2F0IHJlbmRlclBpY2tpbmdCdWZmZXI7XG51bmlmb3JtIHZlYzMgc2VsZWN0ZWRQaWNraW5nQ29sb3I7XG5cbi8vIEN1c3RvbSB1bmlmb3Jtc1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xudW5pZm9ybSBmbG9hdCByYWRpdXM7XG51bmlmb3JtIGZsb2F0IGFuZ2xlO1xudW5pZm9ybSBmbG9hdCBleHRydWRlZDtcbnVuaWZvcm0gZmxvYXQgY292ZXJhZ2U7XG51bmlmb3JtIGZsb2F0IGVsZXZhdGlvblNjYWxlO1xuXG4vLyBSZXN1bHRcbnZhcnlpbmcgdmVjNCB2Q29sb3I7XG5cbi8vIEEgbWFnaWMgbnVtYmVyIHRvIHNjYWxlIGVsZXZhdGlvbiBzbyB0aGF0IDEgdW5pdCBhcHByb3hpbWF0ZSB0byAxIG1ldGVyLlxuI2RlZmluZSBFTEVWQVRJT05fU0NBTEUgMC44XG5cbi8vIHdoZXRoZXIgaXMgcG9pbnQgcGlja2VkXG5mbG9hdCBpc1BpY2tlZCh2ZWMzIHBpY2tpbmdDb2xvcnMsIHZlYzMgc2VsZWN0ZWRDb2xvcikge1xuIHJldHVybiBmbG9hdChwaWNraW5nQ29sb3JzLnggPT0gc2VsZWN0ZWRDb2xvci54XG4gJiYgcGlja2luZ0NvbG9ycy55ID09IHNlbGVjdGVkQ29sb3IueVxuICYmIHBpY2tpbmdDb2xvcnMueiA9PSBzZWxlY3RlZENvbG9yLnopO1xufVxuXG52b2lkIG1haW4odm9pZCkge1xuXG4gIC8vIHJvdGF0ZSBwcmltaXRpdmUgcG9zaXRpb24gYW5kIG5vcm1hbFxuICBtYXQyIHJvdGF0aW9uTWF0cml4ID0gbWF0Mihjb3MoYW5nbGUpLCAtc2luKGFuZ2xlKSwgc2luKGFuZ2xlKSwgY29zKGFuZ2xlKSk7XG5cbiAgdmVjMiByUG9zID0gcm90YXRpb25NYXRyaXggKiBwb3NpdGlvbnMueHo7XG4gIHZlYzIgck5vcm0gPSByb3RhdGlvbk1hdHJpeCAqIG5vcm1hbHMueHo7XG5cbiAgdmVjMyByb3RhdGVkUG9zaXRpb25zID0gdmVjMyhyUG9zLngsIHBvc2l0aW9ucy55LCByUG9zLnkpO1xuICB2ZWMzIHJvdGF0ZWROb3JtYWxzID0gdmVjMyhyTm9ybS54LCBub3JtYWxzLnksIHJOb3JtLnkpO1xuXG4gIC8vIGNhbGN1bGF0ZSBlbGV2YXRpb24sIGlmIDNkIG5vdCBlbmFibGVkIHNldCB0byAwXG4gIC8vIGN5bGluZGFyIGdlbW9ldHJ5IGhlaWdodCBhcmUgYmV0d2VlbiAtMC41IHRvIDAuNSwgdHJhbnNmb3JtIGl0IHRvIGJldHdlZW4gMCwgMVxuICBmbG9hdCBlbGV2YXRpb24gPSAwLjA7XG5cbiAgaWYgKGV4dHJ1ZGVkID4gMC41KSB7XG4gICAgZWxldmF0aW9uID0gcHJvamVjdF9zY2FsZShpbnN0YW5jZVBvc2l0aW9ucy56ICogKHBvc2l0aW9ucy55ICsgMC41KSAqXG4gICAgICBFTEVWQVRJT05fU0NBTEUgKiBlbGV2YXRpb25TY2FsZSk7XG4gIH1cblxuICBmbG9hdCBkb3RSYWRpdXMgPSByYWRpdXMgKiBtaXgoY292ZXJhZ2UsIDAuMCwgZmxvYXQoaW5zdGFuY2VDb2xvcnMuYSA9PSAwLjApKTtcbiAgLy8gLy8gcHJvamVjdCBjZW50ZXIgb2YgaGV4YWdvblxuXG4gIHZlYzQgY2VudHJvaWRQb3NpdGlvbiA9IHZlYzQocHJvamVjdF9wb3NpdGlvbihpbnN0YW5jZVBvc2l0aW9ucy54eSksIGVsZXZhdGlvbiwgMC4wKTtcblxuICB2ZWM0IHBvc2l0aW9uX3dvcmxkc3BhY2UgPSBjZW50cm9pZFBvc2l0aW9uICsgdmVjNCh2ZWMyKHJvdGF0ZWRQb3NpdGlvbnMueHogKiBkb3RSYWRpdXMpLCAwLiwgMS4pO1xuXG4gIGdsX1Bvc2l0aW9uID0gcHJvamVjdF90b19jbGlwc3BhY2UocG9zaXRpb25fd29ybGRzcGFjZSk7XG5cbiAgLy8gcmVuZGVyIGRpc3BsYXlcbiAgaWYgKHJlbmRlclBpY2tpbmdCdWZmZXIgPCAwLjUpIHtcblxuICAgIC8vIFRPRE86IHdlIHNob3VsZCBhbGxvdyB0aGUgdXNlciB0byBzcGVjaWZ5IHRoZSBjb2xvciBmb3IgXCJzZWxlY3RlZCBlbGVtZW50XCJcbiAgICAvLyBjaGVjayB3aGV0aGVyIGhleGFnb24gaXMgY3VycmVudGx5IHBpY2tlZC5cbiAgICBmbG9hdCBzZWxlY3RlZCA9IGlzUGlja2VkKGluc3RhbmNlUGlja2luZ0NvbG9ycywgc2VsZWN0ZWRQaWNraW5nQ29sb3IpO1xuXG4gICAgLy8gTGlnaHQgY2FsY3VsYXRpb25zXG4gICAgLy8gV29ybGRzcGFjZSBpcyB0aGUgbGluZWFyIHNwYWNlIGFmdGVyIE1lcmNhdG9yIHByb2plY3Rpb25cblxuICAgIHZlYzMgbm9ybWFsc193b3JsZHNwYWNlID0gcm90YXRlZE5vcm1hbHM7XG5cbiAgICBmbG9hdCBsaWdodFdlaWdodCA9IDEuMDtcblxuICAgIGlmIChleHRydWRlZCA+IDAuNSkge1xuICAgICAgbGlnaHRXZWlnaHQgPSBnZXRMaWdodFdlaWdodChcbiAgICAgICAgcG9zaXRpb25fd29ybGRzcGFjZS54eXosIC8vIHRoZSB3IGNvbXBvbmVudCBpcyBhbHdheXMgMS4wXG4gICAgICAgIG5vcm1hbHNfd29ybGRzcGFjZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2ZWMzIGxpZ2h0V2VpZ2h0ZWRDb2xvciA9IGxpZ2h0V2VpZ2h0ICogaW5zdGFuY2VDb2xvcnMucmdiO1xuXG4gICAgLy8gQ29sb3I6IEVpdGhlciBvcGFjaXR5LW11bHRpcGxpZWQgaW5zdGFuY2UgY29sb3IsIG9yIHBpY2tpbmcgY29sb3JcbiAgICB2ZWM0IGNvbG9yID0gdmVjNChsaWdodFdlaWdodGVkQ29sb3IsIG9wYWNpdHkgKiBpbnN0YW5jZUNvbG9ycy5hKSAvIDI1NS4wO1xuXG4gICAgdkNvbG9yID0gY29sb3I7XG5cbiAgfSBlbHNlIHtcblxuICAgIHZlYzQgcGlja2luZ0NvbG9yID0gdmVjNChpbnN0YW5jZVBpY2tpbmdDb2xvcnMgLyAyNTUuMCwgMS4wKTtcbiAgICB2Q29sb3IgPSBwaWNraW5nQ29sb3I7XG5cbiAgfVxufVxuYDtcbiJdfQ==