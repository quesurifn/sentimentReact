'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lib = require('../../../lib');

var _scatterplotLayer = require('../scatterplot-layer/scatterplot-layer');

var _scatterplotLayer2 = _interopRequireDefault(_scatterplotLayer);

var _pathLayer = require('../path-layer/path-layer');

var _pathLayer2 = _interopRequireDefault(_pathLayer);

var _solidPolygonLayer = require('../solid-polygon-layer/solid-polygon-layer');

var _solidPolygonLayer2 = _interopRequireDefault(_solidPolygonLayer);

var _geojson = require('./geojson');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Use primitive layer to avoid "Composite Composite" layers for now


var defaultLineColor = [0x0, 0x0, 0x0, 0xFF];
var defaultFillColor = [0x0, 0x0, 0x0, 0xFF];

var defaultProps = {
  stroked: true,
  filled: true,
  extruded: false,
  wireframe: false,

  lineWidthScale: 1,
  lineWidthMinPixels: 0,
  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
  lineJointRounded: false,
  lineMiterLimit: 4,

  pointRadiusScale: 1,
  pointRadiusMinPixels: 0, //  min point radius in pixels
  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels

  fp64: false,

  // Line and polygon outline color
  getLineColor: function getLineColor(f) {
    return (0, _lib.get)(f, 'properties.lineColor') || defaultLineColor;
  },
  // Point and polygon fill color
  getFillColor: function getFillColor(f) {
    return (0, _lib.get)(f, 'properties.fillColor') || defaultFillColor;
  },
  // Point radius
  getRadius: function getRadius(f) {
    return (0, _lib.get)(f, 'properties.radius') || (0, _lib.get)(f, 'properties.size') || 1;
  },
  // Line and polygon outline accessors
  getLineWidth: function getLineWidth(f) {
    return (0, _lib.get)(f, 'properties.lineWidth') || 1;
  },
  // Polygon extrusion accessor
  getElevation: function getElevation(f) {
    return (0, _lib.get)(f, 'properties.elevation') || 1000;
  },

  // Optional settings for 'lighting' shader module
  lightSettings: {
    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.00, 5000],
    ambientRatio: 0.05,
    diffuseRatio: 0.6,
    specularRatio: 0.8,
    lightsStrength: [2.0, 0.0, 0.0, 0.0],
    numberOfLights: 2
  }
};

var getCoordinates = function getCoordinates(f) {
  return (0, _lib.get)(f, 'geometry.coordinates');
};

var GeoJsonLayer = function (_CompositeLayer) {
  _inherits(GeoJsonLayer, _CompositeLayer);

  function GeoJsonLayer() {
    _classCallCheck(this, GeoJsonLayer);

    return _possibleConstructorReturn(this, (GeoJsonLayer.__proto__ || Object.getPrototypeOf(GeoJsonLayer)).apply(this, arguments));
  }

  _createClass(GeoJsonLayer, [{
    key: 'initializeState',
    value: function initializeState() {
      this.state = {
        features: {}
      };
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;

      if (changeFlags.dataChanged) {
        var data = this.props.data;

        var features = (0, _geojson.getGeojsonFeatures)(data);
        this.state.features = (0, _geojson.separateGeojsonFeatures)(features);
      }
    }
  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref2) {
      var info = _ref2.info;

      return Object.assign(info, {
        // override object with picked feature
        object: info.object && info.object.feature || info.object
      });
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      var features = this.state.features;
      var pointFeatures = features.pointFeatures,
          lineFeatures = features.lineFeatures,
          polygonFeatures = features.polygonFeatures,
          polygonOutlineFeatures = features.polygonOutlineFeatures;

      // Layer composition props

      var _props = this.props,
          id = _props.id,
          stroked = _props.stroked,
          filled = _props.filled,
          extruded = _props.extruded,
          wireframe = _props.wireframe,
          lightSettings = _props.lightSettings;

      // Rendering props underlying layer

      var _props2 = this.props,
          lineWidthScale = _props2.lineWidthScale,
          lineWidthMinPixels = _props2.lineWidthMinPixels,
          lineWidthMaxPixels = _props2.lineWidthMaxPixels,
          lineJointRounded = _props2.lineJointRounded,
          lineMiterLimit = _props2.lineMiterLimit,
          pointRadiusScale = _props2.pointRadiusScale,
          pointRadiusMinPixels = _props2.pointRadiusMinPixels,
          pointRadiusMaxPixels = _props2.pointRadiusMaxPixels,
          fp64 = _props2.fp64;

      // Accessor props for underlying layers

      var _props3 = this.props,
          getLineColor = _props3.getLineColor,
          getFillColor = _props3.getFillColor,
          getRadius = _props3.getRadius,
          getLineWidth = _props3.getLineWidth,
          getElevation = _props3.getElevation,
          updateTriggers = _props3.updateTriggers;

      // base layer props

      var _props4 = this.props,
          opacity = _props4.opacity,
          pickable = _props4.pickable,
          visible = _props4.visible,
          getPolygonOffset = _props4.getPolygonOffset;

      // viewport props

      var _props5 = this.props,
          positionOrigin = _props5.positionOrigin,
          projectionMode = _props5.projectionMode,
          modelMatrix = _props5.modelMatrix;


      var drawPoints = pointFeatures && pointFeatures.length > 0;
      var drawLines = lineFeatures && lineFeatures.length > 0;
      var hasPolygonLines = polygonOutlineFeatures && polygonOutlineFeatures.length > 0;
      var hasPolygon = polygonFeatures && polygonFeatures.length > 0;

      // Filled Polygon Layer
      var polygonFillLayer = filled && hasPolygon && new _solidPolygonLayer2.default({
        id: id + '-polygon-fill',
        data: polygonFeatures,
        extruded: extruded,
        wireframe: false,
        lightSettings: lightSettings,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        getPolygonOffset: getPolygonOffset,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getPolygon: getCoordinates,
        getElevation: getElevation,
        getColor: getFillColor,
        updateTriggers: {
          getElevation: updateTriggers.getElevation,
          getColor: updateTriggers.getFillColor
        }
      });

      var polygonWireframeLayer = wireframe && extruded && hasPolygon && new _solidPolygonLayer2.default({
        id: id + '-polygon-wireframe',
        data: polygonFeatures,
        extruded: extruded,
        wireframe: true,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        getPolygonOffset: getPolygonOffset,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getPolygon: getCoordinates,
        getElevation: getElevation,
        getColor: getLineColor,
        updateTriggers: {
          getElevation: updateTriggers.getElevation,
          getColor: updateTriggers.getLineColor
        }
      });

      var polygonLineLayer = !extruded && stroked && hasPolygonLines && new _pathLayer2.default({
        id: id + '-polygon-outline',
        data: polygonOutlineFeatures,
        widthScale: lineWidthScale,
        widthMinPixels: lineWidthMinPixels,
        widthMaxPixels: lineWidthMaxPixels,
        rounded: lineJointRounded,
        miterLimit: lineMiterLimit,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        getPolygonOffset: getPolygonOffset,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getPath: getCoordinates,
        getColor: getLineColor,
        getWidth: getLineWidth,
        updateTriggers: {
          getColor: updateTriggers.getLineColor,
          getWidth: updateTriggers.getLineWidth
        }
      });

      var pathLayer = drawLines && new _pathLayer2.default({
        id: id + '-line-paths',
        data: lineFeatures,
        widthScale: lineWidthScale,
        widthMinPixels: lineWidthMinPixels,
        widthMaxPixels: lineWidthMaxPixels,
        rounded: lineJointRounded,
        miterLimit: lineMiterLimit,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        getPolygonOffset: getPolygonOffset,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getPath: getCoordinates,
        getColor: getLineColor,
        getWidth: getLineWidth,
        updateTriggers: {
          getColor: updateTriggers.getLineColor,
          getWidth: updateTriggers.getLineWidth
        }
      });

      var pointLayer = drawPoints && new _scatterplotLayer2.default({
        id: id + '-points',
        data: pointFeatures,
        radiusScale: pointRadiusScale,
        radiusMinPixels: pointRadiusMinPixels,
        radiusMaxPixels: pointRadiusMaxPixels,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        getPolygonOffset: getPolygonOffset,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getPosition: getCoordinates,
        getColor: getFillColor,
        getRadius: getRadius,
        updateTriggers: {
          getColor: updateTriggers.getFillColor,
          getRadius: updateTriggers.getRadius
        }
      });

      return [
      // If not extruded: flat fill layer is drawn below outlines
      !extruded && polygonFillLayer, polygonWireframeLayer, polygonLineLayer, pathLayer, pointLayer,
      // If extruded: draw fill layer last for correct blending behavior
      extruded && polygonFillLayer];
    }
  }]);

  return GeoJsonLayer;
}(_lib.CompositeLayer);

exports.default = GeoJsonLayer;


GeoJsonLayer.layerName = 'GeoJsonLayer';
GeoJsonLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9nZW9qc29uLWxheWVyL2dlb2pzb24tbGF5ZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdExpbmVDb2xvciIsImRlZmF1bHRGaWxsQ29sb3IiLCJkZWZhdWx0UHJvcHMiLCJzdHJva2VkIiwiZmlsbGVkIiwiZXh0cnVkZWQiLCJ3aXJlZnJhbWUiLCJsaW5lV2lkdGhTY2FsZSIsImxpbmVXaWR0aE1pblBpeGVscyIsImxpbmVXaWR0aE1heFBpeGVscyIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJsaW5lSm9pbnRSb3VuZGVkIiwibGluZU1pdGVyTGltaXQiLCJwb2ludFJhZGl1c1NjYWxlIiwicG9pbnRSYWRpdXNNaW5QaXhlbHMiLCJwb2ludFJhZGl1c01heFBpeGVscyIsImZwNjQiLCJnZXRMaW5lQ29sb3IiLCJmIiwiZ2V0RmlsbENvbG9yIiwiZ2V0UmFkaXVzIiwiZ2V0TGluZVdpZHRoIiwiZ2V0RWxldmF0aW9uIiwibGlnaHRTZXR0aW5ncyIsImxpZ2h0c1Bvc2l0aW9uIiwiYW1iaWVudFJhdGlvIiwiZGlmZnVzZVJhdGlvIiwic3BlY3VsYXJSYXRpbyIsImxpZ2h0c1N0cmVuZ3RoIiwibnVtYmVyT2ZMaWdodHMiLCJnZXRDb29yZGluYXRlcyIsIkdlb0pzb25MYXllciIsInN0YXRlIiwiZmVhdHVyZXMiLCJvbGRQcm9wcyIsInByb3BzIiwiY2hhbmdlRmxhZ3MiLCJkYXRhQ2hhbmdlZCIsImRhdGEiLCJpbmZvIiwiT2JqZWN0IiwiYXNzaWduIiwib2JqZWN0IiwiZmVhdHVyZSIsInBvaW50RmVhdHVyZXMiLCJsaW5lRmVhdHVyZXMiLCJwb2x5Z29uRmVhdHVyZXMiLCJwb2x5Z29uT3V0bGluZUZlYXR1cmVzIiwiaWQiLCJ1cGRhdGVUcmlnZ2VycyIsIm9wYWNpdHkiLCJwaWNrYWJsZSIsInZpc2libGUiLCJnZXRQb2x5Z29uT2Zmc2V0IiwicG9zaXRpb25PcmlnaW4iLCJwcm9qZWN0aW9uTW9kZSIsIm1vZGVsTWF0cml4IiwiZHJhd1BvaW50cyIsImxlbmd0aCIsImRyYXdMaW5lcyIsImhhc1BvbHlnb25MaW5lcyIsImhhc1BvbHlnb24iLCJwb2x5Z29uRmlsbExheWVyIiwiZ2V0UG9seWdvbiIsImdldENvbG9yIiwicG9seWdvbldpcmVmcmFtZUxheWVyIiwicG9seWdvbkxpbmVMYXllciIsIndpZHRoU2NhbGUiLCJ3aWR0aE1pblBpeGVscyIsIndpZHRoTWF4UGl4ZWxzIiwicm91bmRlZCIsIm1pdGVyTGltaXQiLCJnZXRQYXRoIiwiZ2V0V2lkdGgiLCJwYXRoTGF5ZXIiLCJwb2ludExheWVyIiwicmFkaXVzU2NhbGUiLCJyYWRpdXNNaW5QaXhlbHMiLCJyYWRpdXNNYXhQaXhlbHMiLCJnZXRQb3NpdGlvbiIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFvQkE7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7Ozs7OytlQTFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTs7O0FBS0EsSUFBTUEsbUJBQW1CLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLElBQWhCLENBQXpCO0FBQ0EsSUFBTUMsbUJBQW1CLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLElBQWhCLENBQXpCOztBQUVBLElBQU1DLGVBQWU7QUFDbkJDLFdBQVMsSUFEVTtBQUVuQkMsVUFBUSxJQUZXO0FBR25CQyxZQUFVLEtBSFM7QUFJbkJDLGFBQVcsS0FKUTs7QUFNbkJDLGtCQUFnQixDQU5HO0FBT25CQyxzQkFBb0IsQ0FQRDtBQVFuQkMsc0JBQW9CQyxPQUFPQyxnQkFSUjtBQVNuQkMsb0JBQWtCLEtBVEM7QUFVbkJDLGtCQUFnQixDQVZHOztBQVluQkMsb0JBQWtCLENBWkM7QUFhbkJDLHdCQUFzQixDQWJILEVBYU07QUFDekJD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WUFBT0EsRUFBUCxZQURvRDtBQUVwRFYsY0FBTU0sYUFGOEM7QUFHcERnQyxxQkFBYS9ELGdCQUh1QztBQUlwRGdFLHlCQUFpQi9ELG9CQUptQztBQUtwRGdFLHlCQUFpQi9ELG9CQUxtQztBQU1wREMsa0JBTm9EO0FBT3BEa0Msd0JBUG9EO0FBUXBEQywwQkFSb0Q7QUFTcERDLHdCQVRvRDtBQVVwREMsMENBVm9EO0FBV3BERSxzQ0FYb0Q7QUFZcERELHNDQVpvRDtBQWFwREUsZ0NBYm9EO0FBY3BEdUIscUJBQWFqRCxjQWR1QztBQWVwRGtDLGtCQUFVN0MsWUFmMEM7QUFnQnBEQyw0QkFoQm9EO0FBaUJwRDZCLHdCQUFnQjtBQUNkZSxvQkFBVWYsZUFBZTlCLFlBRFg7QUFFZEMscUJBQVc2QixlQUFlN0I7QUFGWjtBQWpCb0MsT0FBckIsQ0FBakM7O0FBdUJBLGFBQU87QUFDTDtBQUNBLE9BQUNoQixRQUFELElBQWEwRCxnQkFGUixFQUdMRyxxQkFISyxFQUlMQyxnQkFKSyxFQUtMUSxTQUxLLEVBTUxDLFVBTks7QUFPTDtBQUNBdkUsa0JBQVkwRCxnQkFSUCxDQUFQO0FBVUQ7Ozs7OztrQkEzTGtCL0IsWTs7O0FBOExyQkEsYUFBYWlELFNBQWIsR0FBeUIsY0FBekI7QUFDQWpELGFBQWE5QixZQUFiLEdBQTRCQSxZQUE1QiIsImZpbGUiOiJnZW9qc29uLWxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7Q29tcG9zaXRlTGF5ZXIsIGdldH0gZnJvbSAnLi4vLi4vLi4vbGliJztcbmltcG9ydCBTY2F0dGVycGxvdExheWVyIGZyb20gJy4uL3NjYXR0ZXJwbG90LWxheWVyL3NjYXR0ZXJwbG90LWxheWVyJztcbmltcG9ydCBQYXRoTGF5ZXIgZnJvbSAnLi4vcGF0aC1sYXllci9wYXRoLWxheWVyJztcbi8vIFVzZSBwcmltaXRpdmUgbGF5ZXIgdG8gYXZvaWQgXCJDb21wb3NpdGUgQ29tcG9zaXRlXCIgbGF5ZXJzIGZvciBub3dcbmltcG9ydCBTb2xpZFBvbHlnb25MYXllciBmcm9tICcuLi9zb2xpZC1wb2x5Z29uLWxheWVyL3NvbGlkLXBvbHlnb24tbGF5ZXInO1xuXG5pbXBvcnQge2dldEdlb2pzb25GZWF0dXJlcywgc2VwYXJhdGVHZW9qc29uRmVhdHVyZXN9IGZyb20gJy4vZ2VvanNvbic7XG5cbmNvbnN0IGRlZmF1bHRMaW5lQ29sb3IgPSBbMHgwLCAweDAsIDB4MCwgMHhGRl07XG5jb25zdCBkZWZhdWx0RmlsbENvbG9yID0gWzB4MCwgMHgwLCAweDAsIDB4RkZdO1xuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIHN0cm9rZWQ6IHRydWUsXG4gIGZpbGxlZDogdHJ1ZSxcbiAgZXh0cnVkZWQ6IGZhbHNlLFxuICB3aXJlZnJhbWU6IGZhbHNlLFxuXG4gIGxpbmVXaWR0aFNjYWxlOiAxLFxuICBsaW5lV2lkdGhNaW5QaXhlbHM6IDAsXG4gIGxpbmVXaWR0aE1heFBpeGVsczogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXG4gIGxpbmVKb2ludFJvdW5kZWQ6IGZhbHNlLFxuICBsaW5lTWl0ZXJMaW1pdDogNCxcblxuICBwb2ludFJhZGl1c1NjYWxlOiAxLFxuICBwb2ludFJhZGl1c01pblBpeGVsczogMCwgLy8gIG1pbiBwb2ludCByYWRpdXMgaW4gcGl4ZWxzXG4gIHBvaW50UmFkaXVzTWF4UGl4ZWxzOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgLy8gbWF4IHBvaW50IHJhZGl1cyBpbiBwaXhlbHNcblxuICBmcDY0OiBmYWxzZSxcblxuICAvLyBMaW5lIGFuZCBwb2x5Z29uIG91dGxpbmUgY29sb3JcbiAgZ2V0TGluZUNvbG9yOiBmID0+IGdldChmLCAncHJvcGVydGllcy5saW5lQ29sb3InKSB8fCBkZWZhdWx0TGluZUNvbG9yLFxuICAvLyBQb2ludCBhbmQgcG9seWdvbiBmaWxsIGNvbG9yXG4gIGdldEZpbGxDb2xvcjogZiA9PiBnZXQoZiwgJ3Byb3BlcnRpZXMuZmlsbENvbG9yJykgfHwgZGVmYXVsdEZpbGxDb2xvcixcbiAgLy8gUG9pbnQgcmFkaXVzXG4gIGdldFJhZGl1czogZiA9PiBnZXQoZiwgJ3Byb3BlcnRpZXMucmFkaXVzJykgfHwgZ2V0KGYsICdwcm9wZXJ0aWVzLnNpemUnKSB8fCAxLFxuICAvLyBMaW5lIGFuZCBwb2x5Z29uIG91dGxpbmUgYWNjZXNzb3JzXG4gIGdldExpbmVXaWR0aDogZiA9PiBnZXQoZiwgJ3Byb3BlcnRpZXMubGluZVdpZHRoJykgfHwgMSxcbiAgLy8gUG9seWdvbiBleHRydXNpb24gYWNjZXNzb3JcbiAgZ2V0RWxldmF0aW9uOiBmID0+IGdldChmLCAncHJvcGVydGllcy5lbGV2YXRpb24nKSB8fCAxMDAwLFxuXG4gIC8vIE9wdGlvbmFsIHNldHRpbmdzIGZvciAnbGlnaHRpbmcnIHNoYWRlciBtb2R1bGVcbiAgbGlnaHRTZXR0aW5nczoge1xuICAgIGxpZ2h0c1Bvc2l0aW9uOiBbLTEyMi40NSwgMzcuNzUsIDgwMDAsIC0xMjIuMCwgMzguMDAsIDUwMDBdLFxuICAgIGFtYmllbnRSYXRpbzogMC4wNSxcbiAgICBkaWZmdXNlUmF0aW86IDAuNixcbiAgICBzcGVjdWxhclJhdGlvOiAwLjgsXG4gICAgbGlnaHRzU3RyZW5ndGg6IFsyLjAsIDAuMCwgMC4wLCAwLjBdLFxuICAgIG51bWJlck9mTGlnaHRzOiAyXG4gIH1cbn07XG5cbmNvbnN0IGdldENvb3JkaW5hdGVzID0gZiA9PiBnZXQoZiwgJ2dlb21ldHJ5LmNvb3JkaW5hdGVzJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlb0pzb25MYXllciBleHRlbmRzIENvbXBvc2l0ZUxheWVyIHtcbiAgaW5pdGlhbGl6ZVN0YXRlKCkge1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBmZWF0dXJlczoge31cbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlU3RhdGUoe29sZFByb3BzLCBwcm9wcywgY2hhbmdlRmxhZ3N9KSB7XG4gICAgaWYgKGNoYW5nZUZsYWdzLmRhdGFDaGFuZ2VkKSB7XG4gICAgICBjb25zdCB7ZGF0YX0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgZmVhdHVyZXMgPSBnZXRHZW9qc29uRmVhdHVyZXMoZGF0YSk7XG4gICAgICB0aGlzLnN0YXRlLmZlYXR1cmVzID0gc2VwYXJhdGVHZW9qc29uRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgIH1cbiAgfVxuXG4gIGdldFBpY2tpbmdJbmZvKHtpbmZvfSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGluZm8sIHtcbiAgICAgIC8vIG92ZXJyaWRlIG9iamVjdCB3aXRoIHBpY2tlZCBmZWF0dXJlXG4gICAgICBvYmplY3Q6IChpbmZvLm9iamVjdCAmJiBpbmZvLm9iamVjdC5mZWF0dXJlKSB8fCBpbmZvLm9iamVjdFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyTGF5ZXJzKCkge1xuICAgIGNvbnN0IHtmZWF0dXJlc30gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtwb2ludEZlYXR1cmVzLCBsaW5lRmVhdHVyZXMsIHBvbHlnb25GZWF0dXJlcywgcG9seWdvbk91dGxpbmVGZWF0dXJlc30gPSBmZWF0dXJlcztcblxuICAgIC8vIExheWVyIGNvbXBvc2l0aW9uIHByb3BzXG4gICAgY29uc3Qge2lkLCBzdHJva2VkLCBmaWxsZWQsIGV4dHJ1ZGVkLCB3aXJlZnJhbWUsIGxpZ2h0U2V0dGluZ3N9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIFJlbmRlcmluZyBwcm9wcyB1bmRlcmx5aW5nIGxheWVyXG4gICAgY29uc3Qge2xpbmVXaWR0aFNjYWxlLCBsaW5lV2lkdGhNaW5QaXhlbHMsIGxpbmVXaWR0aE1heFBpeGVscyxcbiAgICAgIGxpbmVKb2ludFJvdW5kZWQsIGxpbmVNaXRlckxpbWl0LFxuICAgICAgcG9pbnRSYWRpdXNTY2FsZSwgcG9pbnRSYWRpdXNNaW5QaXhlbHMsIHBvaW50UmFkaXVzTWF4UGl4ZWxzLFxuICAgICAgZnA2NH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gQWNjZXNzb3IgcHJvcHMgZm9yIHVuZGVybHlpbmcgbGF5ZXJzXG4gICAgY29uc3Qge2dldExpbmVDb2xvciwgZ2V0RmlsbENvbG9yLCBnZXRSYWRpdXMsXG4gICAgICBnZXRMaW5lV2lkdGgsIGdldEVsZXZhdGlvbiwgdXBkYXRlVHJpZ2dlcnN9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIGJhc2UgbGF5ZXIgcHJvcHNcbiAgICBjb25zdCB7b3BhY2l0eSwgcGlja2FibGUsIHZpc2libGUsIGdldFBvbHlnb25PZmZzZXR9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIHZpZXdwb3J0IHByb3BzXG4gICAgY29uc3Qge3Bvc2l0aW9uT3JpZ2luLCBwcm9qZWN0aW9uTW9kZSwgbW9kZWxNYXRyaXh9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGRyYXdQb2ludHMgPSBwb2ludEZlYXR1cmVzICYmIHBvaW50RmVhdHVyZXMubGVuZ3RoID4gMDtcbiAgICBjb25zdCBkcmF3TGluZXMgPSBsaW5lRmVhdHVyZXMgJiYgbGluZUZlYXR1cmVzLmxlbmd0aCA+IDA7XG4gICAgY29uc3QgaGFzUG9seWdvbkxpbmVzID0gcG9seWdvbk91dGxpbmVGZWF0dXJlcyAmJiBwb2x5Z29uT3V0bGluZUZlYXR1cmVzLmxlbmd0aCA+IDA7XG4gICAgY29uc3QgaGFzUG9seWdvbiA9IHBvbHlnb25GZWF0dXJlcyAmJiBwb2x5Z29uRmVhdHVyZXMubGVuZ3RoID4gMDtcblxuICAgIC8vIEZpbGxlZCBQb2x5Z29uIExheWVyXG4gICAgY29uc3QgcG9seWdvbkZpbGxMYXllciA9IGZpbGxlZCAmJlxuICAgICAgaGFzUG9seWdvbiAmJlxuICAgICAgbmV3IFNvbGlkUG9seWdvbkxheWVyKHtcbiAgICAgICAgaWQ6IGAke2lkfS1wb2x5Z29uLWZpbGxgLFxuICAgICAgICBkYXRhOiBwb2x5Z29uRmVhdHVyZXMsXG4gICAgICAgIGV4dHJ1ZGVkLFxuICAgICAgICB3aXJlZnJhbWU6IGZhbHNlLFxuICAgICAgICBsaWdodFNldHRpbmdzLFxuICAgICAgICBmcDY0LFxuICAgICAgICBvcGFjaXR5LFxuICAgICAgICBwaWNrYWJsZSxcbiAgICAgICAgdmlzaWJsZSxcbiAgICAgICAgZ2V0UG9seWdvbk9mZnNldCxcbiAgICAgICAgcHJvamVjdGlvbk1vZGUsXG4gICAgICAgIHBvc2l0aW9uT3JpZ2luLFxuICAgICAgICBtb2RlbE1hdHJpeCxcbiAgICAgICAgZ2V0UG9seWdvbjogZ2V0Q29vcmRpbmF0ZXMsXG4gICAgICAgIGdldEVsZXZhdGlvbixcbiAgICAgICAgZ2V0Q29sb3I6IGdldEZpbGxDb2xvcixcbiAgICAgICAgdXBkYXRlVHJpZ2dlcnM6IHtcbiAgICAgICAgICBnZXRFbGV2YXRpb246IHVwZGF0ZVRyaWdnZXJzLmdldEVsZXZhdGlvbixcbiAgICAgICAgICBnZXRDb2xvcjogdXBkYXRlVHJpZ2dlcnMuZ2V0RmlsbENvbG9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgY29uc3QgcG9seWdvbldpcmVmcmFtZUxheWVyID0gd2lyZWZyYW1lICYmXG4gICAgICBleHRydWRlZCAmJlxuICAgICAgaGFzUG9seWdvbiAmJlxuICAgICAgbmV3IFNvbGlkUG9seWdvbkxheWVyKHtcbiAgICAgICAgaWQ6IGAke2lkfS1wb2x5Z29uLXdpcmVmcmFtZWAsXG4gICAgICAgIGRhdGE6IHBvbHlnb25GZWF0dXJlcyxcbiAgICAgICAgZXh0cnVkZWQsXG4gICAgICAgIHdpcmVmcmFtZTogdHJ1ZSxcbiAgICAgICAgZnA2NCxcbiAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgcGlja2FibGUsXG4gICAgICAgIHZpc2libGUsXG4gICAgICAgIGdldFBvbHlnb25PZmZzZXQsXG4gICAgICAgIHByb2plY3Rpb25Nb2RlLFxuICAgICAgICBwb3NpdGlvbk9yaWdpbixcbiAgICAgICAgbW9kZWxNYXRyaXgsXG4gICAgICAgIGdldFBvbHlnb246IGdldENvb3JkaW5hdGVzLFxuICAgICAgICBnZXRFbGV2YXRpb24sXG4gICAgICAgIGdldENvbG9yOiBnZXRMaW5lQ29sb3IsXG4gICAgICAgIHVwZGF0ZVRyaWdnZXJzOiB7XG4gICAgICAgICAgZ2V0RWxldmF0aW9uOiB1cGRhdGVUcmlnZ2Vycy5nZXRFbGV2YXRpb24sXG4gICAgICAgICAgZ2V0Q29sb3I6IHVwZGF0ZVRyaWdnZXJzLmdldExpbmVDb2xvclxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGNvbnN0IHBvbHlnb25MaW5lTGF5ZXIgPSAhZXh0cnVkZWQgJiZcbiAgICAgIHN0cm9rZWQgJiZcbiAgICAgIGhhc1BvbHlnb25MaW5lcyAmJlxuICAgICAgbmV3IFBhdGhMYXllcih7XG4gICAgICAgIGlkOiBgJHtpZH0tcG9seWdvbi1vdXRsaW5lYCxcbiAgICAgICAgZGF0YTogcG9seWdvbk91dGxpbmVGZWF0dXJlcyxcbiAgICAgICAgd2lkdGhTY2FsZTogbGluZVdpZHRoU2NhbGUsXG4gICAgICAgIHdpZHRoTWluUGl4ZWxzOiBsaW5lV2lkdGhNaW5QaXhlbHMsXG4gICAgICAgIHdpZHRoTWF4UGl4ZWxzOiBsaW5lV2lkdGhNYXhQaXhlbHMsXG4gICAgICAgIHJvdW5kZWQ6IGxpbmVKb2ludFJvdW5kZWQsXG4gICAgICAgIG1pdGVyTGltaXQ6IGxpbmVNaXRlckxpbWl0LFxuICAgICAgICBmcDY0LFxuICAgICAgICBvcGFjaXR5LFxuICAgICAgICBwaWNrYWJsZSxcbiAgICAgICAgdmlzaWJsZSxcbiAgICAgICAgZ2V0UG9seWdvbk9mZnNldCxcbiAgICAgICAgcHJvamVjdGlvbk1vZGUsXG4gICAgICAgIHBvc2l0aW9uT3JpZ2luLFxuICAgICAgICBtb2RlbE1hdHJpeCxcbiAgICAgICAgZ2V0UGF0aDogZ2V0Q29vcmRpbmF0ZXMsXG4gICAgICAgIGdldENvbG9yOiBnZXRMaW5lQ29sb3IsXG4gICAgICAgIGdldFdpZHRoOiBnZXRMaW5lV2lkdGgsXG4gICAgICAgIHVwZGF0ZVRyaWdnZXJzOiB7XG4gICAgICAgICAgZ2V0Q29sb3I6IHVwZGF0ZVRyaWdnZXJzLmdldExpbmVDb2xvcixcbiAgICAgICAgICBnZXRXaWR0aDogdXBkYXRlVHJpZ2dlcnMuZ2V0TGluZVdpZHRoXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgY29uc3QgcGF0aExheWVyID0gZHJhd0xpbmVzICYmIG5ldyBQYXRoTGF5ZXIoe1xuICAgICAgaWQ6IGAke2lkfS1saW5lLXBhdGhzYCxcbiAgICAgIGRhdGE6IGxpbmVGZWF0dXJlcyxcbiAgICAgIHdpZHRoU2NhbGU6IGxpbmVXaWR0aFNjYWxlLFxuICAgICAgd2lkdGhNaW5QaXhlbHM6IGxpbmVXaWR0aE1pblBpeGVscyxcbiAgICAgIHdpZHRoTWF4UGl4ZWxzOiBsaW5lV2lkdGhNYXhQaXhlbHMsXG4gICAgICByb3VuZGVkOiBsaW5lSm9pbnRSb3VuZGVkLFxuICAgICAgbWl0ZXJMaW1pdDogbGluZU1pdGVyTGltaXQsXG4gICAgICBmcDY0LFxuICAgICAgb3BhY2l0eSxcbiAgICAgIHBpY2thYmxlLFxuICAgICAgdmlzaWJsZSxcbiAgICAgIGdldFBvbHlnb25PZmZzZXQsXG4gICAgICBwcm9qZWN0aW9uTW9kZSxcbiAgICAgIHBvc2l0aW9uT3JpZ2luLFxuICAgICAgbW9kZWxNYXRyaXgsXG4gICAgICBnZXRQYXRoOiBnZXRDb29yZGluYXRlcyxcbiAgICAgIGdldENvbG9yOiBnZXRMaW5lQ29sb3IsXG4gICAgICBnZXRXaWR0aDogZ2V0TGluZVdpZHRoLFxuICAgICAgdXBkYXRlVHJpZ2dlcnM6IHtcbiAgICAgICAgZ2V0Q29sb3I6IHVwZGF0ZVRyaWdnZXJzLmdldExpbmVDb2xvcixcbiAgICAgICAgZ2V0V2lkdGg6IHVwZGF0ZVRyaWdnZXJzLmdldExpbmVXaWR0aFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgcG9pbnRMYXllciA9IGRyYXdQb2ludHMgJiYgbmV3IFNjYXR0ZXJwbG90TGF5ZXIoe1xuICAgICAgaWQ6IGAke2lkfS1wb2ludHNgLFxuICAgICAgZGF0YTogcG9pbnRGZWF0dXJlcyxcbiAgICAgIHJhZGl1c1NjYWxlOiBwb2ludFJhZGl1c1NjYWxlLFxuICAgICAgcmFkaXVzTWluUGl4ZWxzOiBwb2ludFJhZGl1c01pblBpeGVscyxcbiAgICAgIHJhZGl1c01heFBpeGVsczogcG9pbnRSYWRpdXNNYXhQaXhlbHMsXG4gICAgICBmcDY0LFxuICAgICAgb3BhY2l0eSxcbiAgICAgIHBpY2thYmxlLFxuICAgICAgdmlzaWJsZSxcbiAgICAgIGdldFBvbHlnb25PZmZzZXQsXG4gICAgICBwcm9qZWN0aW9uTW9kZSxcbiAgICAgIHBvc2l0aW9uT3JpZ2luLFxuICAgICAgbW9kZWxNYXRyaXgsXG4gICAgICBnZXRQb3NpdGlvbjogZ2V0Q29vcmRpbmF0ZXMsXG4gICAgICBnZXRDb2xvcjogZ2V0RmlsbENvbG9yLFxuICAgICAgZ2V0UmFkaXVzLFxuICAgICAgdXBkYXRlVHJpZ2dlcnM6IHtcbiAgICAgICAgZ2V0Q29sb3I6IHVwZGF0ZVRyaWdnZXJzLmdldEZpbGxDb2xvcixcbiAgICAgICAgZ2V0UmFkaXVzOiB1cGRhdGVUcmlnZ2Vycy5nZXRSYWRpdXNcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBbXG4gICAgICAvLyBJZiBub3QgZXh0cnVkZWQ6IGZsYXQgZmlsbCBsYXllciBpcyBkcmF3biBiZWxvdyBvdXRsaW5lc1xuICAgICAgIWV4dHJ1ZGVkICYmIHBvbHlnb25GaWxsTGF5ZXIsXG4gICAgICBwb2x5Z29uV2lyZWZyYW1lTGF5ZXIsXG4gICAgICBwb2x5Z29uTGluZUxheWVyLFxuICAgICAgcGF0aExheWVyLFxuICAgICAgcG9pbnRMYXllcixcbiAgICAgIC8vIElmIGV4dHJ1ZGVkOiBkcmF3IGZpbGwgbGF5ZXIgbGFzdCBmb3IgY29ycmVjdCBibGVuZGluZyBiZWhhdmlvclxuICAgICAgZXh0cnVkZWQgJiYgcG9seWdvbkZpbGxMYXllclxuICAgIF07XG4gIH1cbn1cblxuR2VvSnNvbkxheWVyLmxheWVyTmFtZSA9ICdHZW9Kc29uTGF5ZXInO1xuR2VvSnNvbkxheWVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbiJdfQ==